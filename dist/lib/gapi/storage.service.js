/*! For license information please see storage.service.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var o=t();for(var r in o)("object"==typeof exports?exports:e)[r]=o[r]}}(this,(function(){return function(){"use strict";var e={d:function(t,o){for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r:function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};function o(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)e[r]=o[r]}return e}e.r(t),e.d(t,{default:function(){return i}});var r=function e(t,r){function n(e,n,i){if("undefined"!=typeof document){"number"==typeof(i=o({},r,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var s="";for(var c in i)i[c]&&(s+="; "+c,!0!==i[c]&&(s+="="+i[c].split(";")[0]));return document.cookie=e+"="+t.write(n,e)+s}}return Object.create({set:n,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var o=document.cookie?document.cookie.split("; "):[],r={},n=0;n<o.length;n++){var i=o[n].split("="),s=i.slice(1).join("=");try{var c=decodeURIComponent(i[0]);if(r[c]=t.read(s,c),e===c)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){n(e,"",o({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,o({},this.attributes,t))},withConverter:function(t){return e(o({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(r)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"});class n{storage=r;set(e,t,o){return t=o&&o.isObject?JSON.stringify(t):t,this.storage.set(e,t)}get(e){try{return JSON.parse(this.storage.get(e))}catch(t){return this.storage.get(e)}}remove(e){this.storage.remove(e)}}var i=new class{storage=new n;key_GoogleLoginResponse="key_GoogleLoginResponse";setGoogleLoginResponse(e){this.storage.set(this.key_GoogleLoginResponse,JSON.stringify(e))}getGoogleLoginResponse(){return this.storage.get(this.key_GoogleLoginResponse)}clearGoogleLoginResponse(){return this.storage.remove(this.key_GoogleLoginResponse)}};return t}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*! For license information please see index.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,(function(){return function(){"use strict";var e={145:function(e,t,n){n.d(t,{default:function(){return Je}});var r={};function o(e,t){return function(){return e.apply(t,arguments)}}n.r(r),n.d(r,{hasBrowserEnv:function(){return re},hasStandardBrowserEnv:function(){return oe},hasStandardBrowserWebWorkerEnv:function(){return se}});const{toString:i}=Object.prototype,{getPrototypeOf:s}=Object,a=(c=Object.create(null),e=>{const t=i.call(e);return c[t]||(c[t]=t.slice(8,-1).toLowerCase())});var c;const l=e=>(e=e.toLowerCase(),t=>a(t)===e),u=e=>t=>typeof t===e,{isArray:f}=Array,d=u("undefined"),p=l("ArrayBuffer"),h=u("string"),m=u("function"),g=u("number"),y=e=>null!==e&&"object"==typeof e,w=e=>{if("object"!==a(e))return!1;const t=s(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},b=l("Date"),v=l("File"),E=l("Blob"),A=l("FileList"),O=l("URLSearchParams");function S(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),f(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),i=o.length;let s;for(r=0;r<i;r++)s=o[r],t.call(null,e[s],s,e)}}function R(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const C="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,P=e=>!d(e)&&e!==C,T=(j="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>j&&e instanceof j);var j;const x=l("HTMLFormElement"),N=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),_=l("RegExp"),k=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};S(n,((n,o)=>{let i;!1!==(i=t(n,o,e))&&(r[o]=i||n)})),Object.defineProperties(e,r)},U="abcdefghijklmnopqrstuvwxyz",D="0123456789",F={DIGIT:D,ALPHA:U,ALPHA_DIGIT:U+U.toUpperCase()+D},L=l("AsyncFunction");var B={isArray:f,isArrayBuffer:p,isBuffer:function(e){return null!==e&&!d(e)&&null!==e.constructor&&!d(e.constructor)&&m(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||m(e.append)&&("formdata"===(t=a(e))||"object"===t&&m(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&p(e.buffer),t},isString:h,isNumber:g,isBoolean:e=>!0===e||!1===e,isObject:y,isPlainObject:w,isUndefined:d,isDate:b,isFile:v,isBlob:E,isRegExp:_,isFunction:m,isStream:e=>y(e)&&m(e.pipe),isURLSearchParams:O,isTypedArray:T,isFileList:A,forEach:S,merge:function e(){const{caseless:t}=P(this)&&this||{},n={},r=(r,o)=>{const i=t&&R(n,o)||o;w(n[i])&&w(r)?n[i]=e(n[i],r):w(r)?n[i]=e({},r):f(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&S(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(S(t,((t,r)=>{n&&m(t)?e[r]=o(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,a;const c={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],r&&!r(a,e,t)||c[a]||(t[a]=e[a],c[a]=!0);e=!1!==n&&s(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:l,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(f(e))return e;let t=e.length;if(!g(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:x,hasOwnProperty:N,hasOwnProp:N,reduceDescriptors:k,freezeMethods:e=>{k(e,((t,n)=>{if(m(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];m(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return f(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:R,global:C,isContextDefined:P,ALPHABET:F,generateString:(e=16,t=F.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&m(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(y(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=f(e)?[]:{};return S(e,((e,t)=>{const i=n(e,r+1);!d(i)&&(o[t]=i)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:L,isThenable:e=>e&&(y(e)||m(e))&&m(e.then)&&m(e.catch)};function I(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}B.inherits(I,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:B.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const q=I.prototype,M={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{M[e]={value:e}})),Object.defineProperties(I,M),Object.defineProperty(q,"isAxiosError",{value:!0}),I.from=(e,t,n,r,o,i)=>{const s=Object.create(q);return B.toFlatObject(e,s,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),I.call(s,e.message,t,n,r,o),s.cause=e,s.name=e.name,i&&Object.assign(s,i),s};var G=I;function z(e){return B.isPlainObject(e)||B.isArray(e)}function V(e){return B.endsWith(e,"[]")?e.slice(0,-2):e}function H(e,t,n){return e?e.concat(t).map((function(e,t){return e=V(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const J=B.toFlatObject(B,{},null,(function(e){return/^is[A-Z]/.test(e)}));var W=function(e,t,n){if(!B.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=B.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!B.isUndefined(t[e])}))).metaTokens,o=n.visitor||l,i=n.dots,s=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&B.isSpecCompliantForm(t);if(!B.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(B.isDate(e))return e.toISOString();if(!a&&B.isBlob(e))throw new G("Blob is not supported. Use a Buffer instead.");return B.isArrayBuffer(e)||B.isTypedArray(e)?a&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,o){let a=e;if(e&&!o&&"object"==typeof e)if(B.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(B.isArray(e)&&function(e){return B.isArray(e)&&!e.some(z)}(e)||(B.isFileList(e)||B.endsWith(n,"[]"))&&(a=B.toArray(e)))return n=V(n),a.forEach((function(e,r){!B.isUndefined(e)&&null!==e&&t.append(!0===s?H([n],r,i):null===s?n:n+"[]",c(e))})),!1;return!!z(e)||(t.append(H(o,n,i),c(e)),!1)}const u=[],f=Object.assign(J,{defaultVisitor:l,convertValue:c,isVisitable:z});if(!B.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!B.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),B.forEach(n,(function(n,i){!0===(!(B.isUndefined(n)||null===n)&&o.call(t,n,B.isString(i)?i.trim():i,r,f))&&e(n,r?r.concat(i):[i])})),u.pop()}}(e),t};function $(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function K(e,t){this._pairs=[],e&&W(e,this,t)}const X=K.prototype;X.append=function(e,t){this._pairs.push([e,t])},X.toString=function(e){const t=e?function(t){return e.call(this,t,$)}:$;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var Q=K;function Z(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Y(e,t,n){if(!t)return e;const r=n&&n.encode||Z,o=n&&n.serialize;let i;if(i=o?o(t,n):B.isURLSearchParams(t)?t.toString():new Q(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}var ee=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){B.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},te={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ne={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Q,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const re="undefined"!=typeof window&&"undefined"!=typeof document,oe=(ie="undefined"!=typeof navigator&&navigator.product,re&&["ReactNative","NativeScript","NS"].indexOf(ie)<0);var ie;const se="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts;var ae={...r,...ne},ce=function(e){function t(e,n,r,o){let i=e[o++];const s=Number.isFinite(+i),a=o>=e.length;return i=!i&&B.isArray(r)?r.length:i,a?(B.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!s):(r[i]&&B.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&B.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}(r[i])),!s)}if(B.isFormData(e)&&B.isFunction(e.entries)){const n={};return B.forEachEntry(e,((e,r)=>{t(function(e){return B.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null};const le={transitional:te,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=B.isObject(e);if(o&&B.isHTMLForm(e)&&(e=new FormData(e)),B.isFormData(e))return r&&r?JSON.stringify(ce(e)):e;if(B.isArrayBuffer(e)||B.isBuffer(e)||B.isStream(e)||B.isFile(e)||B.isBlob(e))return e;if(B.isArrayBufferView(e))return e.buffer;if(B.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return W(e,new ae.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ae.isNode&&B.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=B.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return W(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(B.isString(e))try{return(0,JSON.parse)(e),B.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||le.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&B.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw G.from(e,G.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ae.classes.FormData,Blob:ae.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};B.forEach(["delete","get","head","post","put","patch"],(e=>{le.headers[e]={}}));var ue=le;const fe=B.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),de=Symbol("internals");function pe(e){return e&&String(e).trim().toLowerCase()}function he(e){return!1===e||null==e?e:B.isArray(e)?e.map(he):String(e)}function me(e,t,n,r,o){return B.isFunction(r)?r.call(this,t,n):(o&&(t=n),B.isString(t)?B.isString(r)?-1!==t.indexOf(r):B.isRegExp(r)?r.test(t):void 0:void 0)}class ge{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=pe(t);if(!o)throw new Error("header name must be a non-empty string");const i=B.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=he(e))}const i=(e,t)=>B.forEach(e,((e,n)=>o(e,n,t)));return B.isPlainObject(e)||e instanceof this.constructor?i(e,t):B.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&fe[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=pe(e)){const n=B.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(B.isFunction(t))return t.call(this,e,n);if(B.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=pe(e)){const n=B.findKey(this,e);return!(!n||void 0===this[n]||t&&!me(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=pe(e)){const o=B.findKey(n,e);!o||t&&!me(0,n[o],o,t)||(delete n[o],r=!0)}}return B.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!me(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return B.forEach(this,((r,o)=>{const i=B.findKey(n,o);if(i)return t[i]=he(r),void delete t[o];const s=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();s!==o&&delete t[o],t[s]=he(r),n[s]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return B.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&B.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[de]=this[de]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=pe(e);t[r]||(function(e,t){const n=B.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return B.isArray(e)?e.forEach(r):r(e),this}}ge.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),B.reduceDescriptors(ge.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),B.freezeMethods(ge);var ye=ge;function we(e,t){const n=this||ue,r=t||n,o=ye.from(r.headers);let i=r.data;return B.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function be(e){return!(!e||!e.__CANCEL__)}function ve(e,t,n){G.call(this,null==e?"canceled":e,G.ERR_CANCELED,t,n),this.name="CanceledError"}B.inherits(ve,G,{__CANCEL__:!0});var Ee=ve,Ae=ae.hasStandardBrowserEnv?{write(e,t,n,r,o,i){const s=[e+"="+encodeURIComponent(t)];B.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),B.isString(r)&&s.push("path="+r),B.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function Oe(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var Se=ae.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=B.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Re(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,i=0,s=0;return t=void 0!==t?t:1e3,function(a){const c=Date.now(),l=r[s];o||(o=c),n[i]=a,r[i]=c;let u=s,f=0;for(;u!==i;)f+=n[u++],u%=e;if(i=(i+1)%e,i===s&&(s=(s+1)%e),c-o<t)return;const d=l&&c-l;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const i=o.loaded,s=o.lengthComputable?o.total:void 0,a=i-n,c=r(a);n=i;const l={loaded:i,total:s,progress:s?i/s:void 0,bytes:a,rate:c||void 0,estimated:c&&s&&i<=s?(s-i)/c:void 0,event:o};l[t?"download":"upload"]=!0,e(l)}}const Ce={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=ye.from(e.headers).normalize();let i,s,{responseType:a,withXSRFToken:c}=e;function l(){e.cancelToken&&e.cancelToken.unsubscribe(i),e.signal&&e.signal.removeEventListener("abort",i)}if(B.isFormData(r))if(ae.hasStandardBrowserEnv||ae.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(s=o.getContentType())){const[e,...t]=s?s.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const f=Oe(e.baseURL,e.url);function d(){if(!u)return;const r=ye.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new G("Request failed with status code "+n.status,[G.ERR_BAD_REQUEST,G.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),l()}),(function(e){n(e),l()}),{data:a&&"text"!==a&&"json"!==a?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),Y(f,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=d:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(d)},u.onabort=function(){u&&(n(new G("Request aborted",G.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new G("Network Error",G.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||te;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new G(t,r.clarifyTimeoutError?G.ETIMEDOUT:G.ECONNABORTED,e,u)),u=null},ae.hasStandardBrowserEnv&&(c&&B.isFunction(c)&&(c=c(e)),c||!1!==c&&Se(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&Ae.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&B.forEach(o.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),B.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),a&&"json"!==a&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",Re(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",Re(e.onUploadProgress)),(e.cancelToken||e.signal)&&(i=t=>{u&&(n(!t||t.type?new Ee(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(i),e.signal&&(e.signal.aborted?i():e.signal.addEventListener("abort",i)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);p&&-1===ae.protocols.indexOf(p)?n(new G("Unsupported protocol "+p+":",G.ERR_BAD_REQUEST,e)):u.send(r||null)}))}};B.forEach(Ce,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Pe=e=>`- ${e}`,Te=e=>B.isFunction(e)||null===e||!1===e;var je=e=>{e=B.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let i=0;i<t;i++){let t;if(n=e[i],r=n,!Te(n)&&(r=Ce[(t=String(n)).toLowerCase()],void 0===r))throw new G(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+i]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(Pe).join("\n"):" "+Pe(e[0]):"as no adapter specified";throw new G("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function xe(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ee(null,e)}function Ne(e){return xe(e),e.headers=ye.from(e.headers),e.data=we.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),je(e.adapter||ue.adapter)(e).then((function(t){return xe(e),t.data=we.call(e,e.transformResponse,t),t.headers=ye.from(t.headers),t}),(function(t){return be(t)||(xe(e),t&&t.response&&(t.response.data=we.call(e,e.transformResponse,t.response),t.response.headers=ye.from(t.response.headers))),Promise.reject(t)}))}const _e=e=>e instanceof ye?e.toJSON():e;function ke(e,t){t=t||{};const n={};function r(e,t,n){return B.isPlainObject(e)&&B.isPlainObject(t)?B.merge.call({caseless:n},e,t):B.isPlainObject(t)?B.merge({},t):B.isArray(t)?t.slice():t}function o(e,t,n){return B.isUndefined(t)?B.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!B.isUndefined(t))return r(void 0,t)}function s(e,t){return B.isUndefined(t)?B.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function a(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,withXSRFToken:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:a,headers:(e,t)=>o(_e(e),_e(t),!0)};return B.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=c[r]||o,s=i(e[r],t[r],r);B.isUndefined(s)&&i!==a||(n[r]=s)})),n}const Ue={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Ue[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const De={};Ue.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,i)=>{if(!1===e)throw new G(r(o," has been removed"+(t?" in "+t:"")),G.ERR_DEPRECATED);return t&&!De[o]&&(De[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};var Fe={assertOptions:function(e,t,n){if("object"!=typeof e)throw new G("options must be an object",G.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],s=t[i];if(s){const t=e[i],n=void 0===t||s(t,i,e);if(!0!==n)throw new G("option "+i+" must be "+n,G.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new G("Unknown option "+i,G.ERR_BAD_OPTION)}},validators:Ue};const Le=Fe.validators;class Be{constructor(e){this.defaults=e,this.interceptors={request:new ee,response:new ee}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=ke(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&Fe.assertOptions(n,{silentJSONParsing:Le.transitional(Le.boolean),forcedJSONParsing:Le.transitional(Le.boolean),clarifyTimeoutError:Le.transitional(Le.boolean)},!1),null!=r&&(B.isFunction(r)?t.paramsSerializer={serialize:r}:Fe.assertOptions(r,{encode:Le.function,serialize:Le.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=o&&B.merge(o.common,o[t.method]);o&&B.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=ye.concat(i,o);const s=[];let a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,s.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,f=0;if(!a){const e=[Ne.bind(this),void 0];for(e.unshift.apply(e,s),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);f<u;)l=l.then(e[f++],e[f++]);return l}u=s.length;let d=t;for(f=0;f<u;){const e=s[f++],t=s[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{l=Ne.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,u=c.length;f<u;)l=l.then(c[f++],c[f++]);return l}getUri(e){return Y(Oe((e=ke(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}B.forEach(["delete","get","head","options"],(function(e){Be.prototype[e]=function(t,n){return this.request(ke(n||{},{method:e,url:t,data:(n||{}).data}))}})),B.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(ke(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Be.prototype[e]=t(),Be.prototype[e+"Form"]=t(!0)}));var Ie=Be;class qe{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Ee(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new qe((function(t){e=t})),cancel:e}}}var Me=qe;const Ge={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ge).forEach((([e,t])=>{Ge[t]=e}));var ze=Ge;const Ve=function e(t){const n=new Ie(t),r=o(Ie.prototype.request,n);return B.extend(r,Ie.prototype,n,{allOwnKeys:!0}),B.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(ke(t,n))},r}(ue);Ve.Axios=Ie,Ve.CanceledError=Ee,Ve.CancelToken=Me,Ve.isCancel=be,Ve.VERSION="1.6.2",Ve.toFormData=W,Ve.AxiosError=G,Ve.Cancel=Ve.CanceledError,Ve.all=function(e){return Promise.all(e)},Ve.spread=function(e){return function(t){return e.apply(null,t)}},Ve.isAxiosError=function(e){return B.isObject(e)&&!0===e.isAxiosError},Ve.mergeConfig=ke,Ve.AxiosHeaders=ye,Ve.formToJSON=e=>ce(B.isHTMLForm(e)?new FormData(e):e),Ve.getAdapter=je,Ve.HttpStatusCode=ze,Ve.default=Ve;var He=Ve,Je={get:(e,{params:t})=>He.get(e,{params:t}),post:(e,t={},n={})=>He.post(e,t,n)}},201:function(e,t,n){n.d(t,{GapiAnalyticsService:function(){return s}});var r=n(659),o=n(353),i=n(145);class s{gapi;analytics;realtimeAPI;analyticsdata;analyticsadmin;management;webproperties;accounts;profiles;initializationPending=!0;initialisationsParams;constructor(e){const{clientId:t,authScopes:n,GA4AdminEmail:r}=e;this.initialisationsParams=e}async refreshAccessToken(e){return await i.default.post(this.initialisationsParams.serverUrls.refreshToken,{email:e},{headers:{Accept:"application/json"}})}async errorHandler(e,t){return new Promise((async(n,o)=>{const{status:i,result:s}=e;if(401===i){const{refresh_token:i}=r.default.getGoogleLoginResponse()||{};console.log("refresh_token",i);const{data:s}=await this.refreshAccessToken(this.initialisationsParams.GA4AdminEmail).catch(o);console.log("credentials :>> ",s),s||o(e),r.default.setGoogleLoginResponse(s),this.setAccessToken();const{method:a,args:c}=t;console.log("method, args :>> ",a,c),n(this[a](...c))}o(e)}))}get gapiIsScriptAreAllDownloaded(){const e=window?.gapi,t=e?.client?.analytics,n=e?.client?.analyticsdata,r=e?.client?.analyticsadmin;return!!(e&&t&&r&&n)}async init(){return new Promise((async(e,t)=>{this.gapiIsScriptAreAllDownloaded?(this.gapi=window?.gapi,this.analytics=this.gapi.client.analytics,this.realtimeAPI=this.gapi.client.analytics.data.realtime,this.analyticsdata=this.gapi.client.analyticsdata,this.analyticsadmin=this.gapi.client.analyticsadmin,this.management=this.gapi.client.analytics.management,this.accounts=this.management.accounts,this.webproperties=this.management.webproperties,this.profiles=this.management.profiles,this.setAccessToken(),this.initializationPending=!1,e(!0)):setTimeout((async()=>{e(await this.init())}),1e3)}))}async queryReport(e,t){if(console.log("property",e),!e)throw new Error("Google property isnt set");try{let{dimensions:n,metrics:r,startDate:i,endDate:s}=t;r=(r||[]).map((e=>"string"==typeof e?{name:e}:e)),n=(n||[]).map((e=>"string"==typeof e?{name:e}:e));const a=await this.analyticsdata.properties.runReport({property:e,dateRanges:[{startDate:i,endDate:s}],metrics:r,dimensions:n,metricAggregations:["TOTAL"]}).then((e=>e));return(0,o.parseReportAsChartData)([a])}catch(n){return await this.errorHandler(n,{method:"queryReport",args:[e,t]})}}async listAccounts(){return console.log(" this.analyticsadmin",this.analyticsadmin),await this.analyticsadmin.accountSummaries.list().then((e=>e.result.accountSummaries)).catch((async e=>{const t=await this.errorHandler(e,{method:"listAccounts",args:[]});return console.log("res",t),t}))}setAccessToken(){const{access_token:e}=r.default.getGoogleLoginResponse()||{};this.gapi.client.setToken({access_token:e}),this.gapi.auth.setToken({access_token:e})}}},353:function(e,t,n){n.d(t,{parseReportAsChartData:function(){return c},signInWithGoogle:function(){return s}});var r=n(145),o=n(659);const i={Accept:"application/json"},s=({requestCode:e=!1,clientId:t,scope:n,accessTokenServerUrl:s})=>{if(null!=typeof window&&window?.google)return new Promise(((a,c)=>{const l=window.google.accounts.oauth2.initCodeClient({client_id:t,scope:n,ux_mode:"popup",include_granted_scopes:!0,access_type:"offline",callback:async e=>{await async function({code:e,serverUrl:t}){return await r.default.post(t,{code:e,redirectUri:window.location.protocol+"//"+window.location.host},{headers:i})}({...e,serverUrl:s}).then((e=>{o.default.setGoogleLoginResponse(e.data),a(e.data)})).catch((e=>c(e)))}});e&&l.requestCode()}))};function a(e){const{data:t,dimension:n}=e,{rows:r,dimensions:o,metrics:i,metricsTotals:s}=t;if(!o.includes(n))return t;const a=o.indexOf(n),c=r.map((e=>{const{dimensionValues:t,metricValues:n}=e,r=n.reduce(((e,t)=>({...e,[t.name]:t.value})),{});return{name:t[a].value,...r}}));let l={};return i.forEach((({name:e},t)=>{l[e]=c.reduce(((t,n)=>{let r=t;return n[e]&&(r+=parseInt(n[e])),r}),0)})),{data:c,totals:l}}function c(e){const t=function(e){let{result:{metricHeaders:t=[],dimensionHeaders:n=[],rows:r=[],totals:o}}=e[0];const i=r.map((e=>{let{dimensionValues:r=[],metricValues:o=[]}=e;return r=r.map(((e,t)=>({...n[t],...e}))),o=o.map(((e,n)=>({...t[n],...e}))),{dimensionValues:r,metricValues:o}})),s=t.reduce(((e,t,n)=>({...e,[t.name]:o[0]?.metricValues[n]?.value||0})),{});return{metrics:t,dimensions:n,rows:i,metricsTotals:s}}(e);let{rows:n,dimensions:r,metricsTotals:o}=t;return r=r.reduce(((e,n)=>({...e,[n.name]:a({data:t,dimension:n})})),{}),{dimensions:r,metricsTotals:o}}},418:function(e,t,n){n.d(t,{GA4ClientFacade:function(){return a}});var r=n(333),o=n(201),i=n(135);function s(e){(0,i.checkPeriod)(e);const{format:t,magicValue:n,value:r}=e;return"magic"===t?{startDate:n+"daysAgo",endDate:"today"}:"date"===t?{startDate:r.start,endDate:r.end||"today"}:void 0}class a extends r.AnalyticsClientBaseClass{gapiService;initialisationsParams;constructor(e){super(),this.initialisationsParams=e,this.gapiService=new o.GapiAnalyticsService(e)}async listAccounts(){if(!this.gapiService)throw new Error("GA4 client isn't initialized correctly. Please make sure the active client is GA4");if(!this.gapiService.gapiIsScriptAreAllDownloaded)throw new Error("Gapi script are still loading. PLease retry.");return await this.gapiService.listAccounts()}async getVisitsPerPeriod(e){const{period:t,ga4:{property:n,format:r}={}}=e;this.checkProperty(n);let o={dimensions:["date"],metrics:["sessions","newUsers","screenPageViews","averageSessionDuration"],...s(t),format:r};return await this.gapiService.queryReport(n,o)}async getEventCount(e){const{events:t,period:n,ga4:{property:r,format:o}={}}=e;this.checkProperty(r);const i=function(e){return e.map((e=>{const{name:t,meta:{ga4:n}={}}=e;return n&&n.conversion?`conversions:${t}`:t}))}(t);let a={dimensions:[],metrics:i,...s(n),format:o};return await this.gapiService.queryReport(r,a).then((e=>{const n=e?.metricsTotals||{};console.log("totals",n,i);const r={};for(let e=0;e<i.length;e++){const o=t.map((e=>e.name))[e];r[o]=n[i[e]]}return r}))}checkProperty(e){if(!e)throw new Error("ga4ProppertyID is required")}}},659:function(e,t,n){function r(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}n.r(t),n.d(t,{default:function(){return s}});var o=function e(t,n){function o(e,o,i){if("undefined"!=typeof document){"number"==typeof(i=r({},n,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var s="";for(var a in i)i[a]&&(s+="; "+a,!0!==i[a]&&(s+="="+i[a].split(";")[0]));return document.cookie=e+"="+t.write(o,e)+s}}return Object.create({set:o,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],r={},o=0;o<n.length;o++){var i=n[o].split("="),s=i.slice(1).join("=");try{var a=decodeURIComponent(i[0]);if(r[a]=t.read(s,a),e===a)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){o(e,"",r({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,r({},this.attributes,t))},withConverter:function(t){return e(r({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"});class i{storage=o;set(e,t,n){return t=n&&n.isObject?JSON.stringify(t):t,this.storage.set(e,t)}get(e){try{return JSON.parse(this.storage.get(e))}catch(t){return this.storage.get(e)}}remove(e){this.storage.remove(e)}}var s=new class{storage=new i;key_GoogleLoginResponse="key_GoogleLoginResponse";setGoogleLoginResponse(e){this.storage.set(this.key_GoogleLoginResponse,JSON.stringify(e))}getGoogleLoginResponse(){return this.storage.get(this.key_GoogleLoginResponse)}clearGoogleLoginResponse(){return this.storage.remove(this.key_GoogleLoginResponse)}}},589:function(e,t,n){n.d(t,{default:function(){return a},matmoSegmentOperators:function(){return s}});var r=n(484),o=n(630),i=n(145);const s={OR:",",AND:";"};class a{matomoConfigs;constructor(e){this.initConfig(e)}initConfig(e){console.log("data",e),this.matomoConfigs=e}createMatomoAPIRequest(e){return async t=>{try{if(!this.matomoConfigs)throw new Error("Please set matomo configs and retry");const n=this.matomoConfigs.baseUrl,r={module:"API",method:e,idSite:this.matomoConfigs.idSite,token_auth:this.matomoConfigs.tokenAuth,format:"json",...t},o=await i.default.get(n,{params:r});if("error"===o?.data?.result)throw{...o?.data};return o.data}catch(e){throw console.error("Error making Matomo API request:",e),e}}}async getEventsCategory(e){const t=this.createMatomoAPIRequest(r.EventsMethods.getCategory),n=await t(e);return(0,o.mergeEventsPerCategories)(n)}async getEventsAction(e){const t=this.createMatomoAPIRequest(r.EventsMethods.getAction),n=await t(e);return(0,o.mergeEventsPerCategories)(n)}async getEventsName(e){const t=this.createMatomoAPIRequest(r.EventsMethods.getName),n=await t(e);return(0,o.mergeEventsPerCategories)(n)}}},484:function(e,t,n){n.d(t,{EventsMethods:function(){return r},EventsSegments:function(){return o}});const r={getCategory:"Events.getCategory",getAction:"Events.getAction",getName:"Events.getName"},o={eventCategory:"eventCategory"}},630:function(e,t,n){n.d(t,{mergeEventsPerCategories:function(){return r}});const r=e=>{const t={};for(const n in e){const r=e[n];for(const e of r){const{label:n,...r}=e;t[n]?t[n]={...t[n],...r,nb_visits:t[n].nb_visits+e.nb_visits,nb_events:t[n].nb_events+e.nb_events}:t[n]={...r}}}return t}},803:function(e,t,n){n.d(t,{MatomoClientFacade:function(){return c}});var r=n(333),o=n(589),i=n(135),s=n(484);function a(e){(0,i.checkPeriod)(e);const{format:t,magicValue:n,value:r}=e;return"magic"===t?"last"+n:`${r.start}${r.end?",":""}${r.end}`}class c extends r.AnalyticsClientBaseClass{matomoClientCore;constructor(e){super(),this.matomoClientCore=new o.default(e)}async getEventCount(e){const{events:t,period:n,matomo:{}={}}=e;(0,i.checkPeriod)(n);const{OR:r}=o.matmoSegmentOperators,{eventCategory:c}=s.EventsSegments;let l="segment=";for(let e=0;e<t.length;e++)l+=`${c}==${t[e].name}${e<t.length?r:""}`;const u={period:"day",date:a(n)};return new Promise((async(e,n)=>{await this.matomoClientCore.getEventsCategory(u).then((n=>{const r={};for(let e=0;e<t.length;e++){const o=t[e].name;r[o]=n[o]?.nb_events||0}e(r)})).catch((e=>{n(e)}))}))}}},333:function(e,t,n){n.d(t,{AnalyticsClientBaseClass:function(){return r}});class r{async getVisitsPerPeriod(e){}async getEventCount(e){}}},135:function(e,t,n){function r(e){const{format:t,value:n,magicValue:r}=e;if(!t)throw new Error("period format is required");if("magic"===t&&"string"!=typeof r&&"number"!=typeof r)throw new Error(" unexpected magicValue "+r+" for format magic. Must be string|number");if("date"===t&&("object"!=typeof n||!n.start))throw new Error(" unexpected period value for format date. must be of type {start:string, end:string}")}n.d(t,{checkPeriod:function(){return r}})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return function(){n.r(r),n.d(r,{AnalyticsClient:function(){return s},localStorageService:function(){return o},signInWithGoogle:function(){return i.signInWithGoogle}});var e=n(418),t=n(803),o=n(659),i=n(353);t.MatomoClientFacade,e.GA4ClientFacade;class s{clientType;activeClient;constructor(){}async initGA4(t){return this.clientType="ga4",this.activeClient=new e.GA4ClientFacade(t),await this.activeClient.gapiService.init()}get ga4Utils(){if("ga4"!==this.clientType)throw new Error("ga4Utils isnt available as ga4 isnt the active client. Please make sure the active client is GA4");if(!this.activeClient)throw new Error("The active client is undefined, please run initGA4");return{listAccounts:this.activeClient.listAccounts.bind(this.activeClient),isInitializing:this.activeClient.gapiService.initializationPending,service:this.activeClient.gapiService}}initMatomo(e){this.clientType="matomo",this.activeClient=new t.MatomoClientFacade(e)}async getVisitsPerPeriod(e){return this.checkIfReady(),await this.activeClient.getVisitsPerPeriod(e)}async getEventCount(e){return this.checkIfReady(),await this.activeClient.getEventCount(e)}checkIfReady(){if(!this.activeClient)throw new Error("Client isnt set.")}clone(){const e=new s,t=this;return Object.keys(t).map((n=>{e[n]=t[n]})),e}}}(),r}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,